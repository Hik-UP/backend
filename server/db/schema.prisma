datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

model User {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    username            String              @unique @db.VarChar(24)
    email               String              @unique @db.VarChar(256)
    password            String
    picture             String
    skinId              String              @db.VarChar(36)
    skin                Skin                @relation(fields: [skinId], references: [id])
    inbox               Notification[]
    comments            Comment[]
    hikes               Hike[]              @relation("Attendee")
    invitations         Hike[]              @relation("Guest")
    stats               Stats[]
    pointOfInterests    PointOfInterest[]
    roles               Role[]              @default([USER])
    createdAt           DateTime            @default(now())
}

model Skin {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    name                String              @unique @db.VarChar(24)
    description         String
    picture             String
    model               String
    users               User[]
}

model Notification {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    receiverId          String              @db.VarChar(36)
    receiver            User                @relation(fields: [receiverId], references: [id])
    title               String
    body                String
    read                Boolean             @default(false)
    date                DateTime            @default(now())
}

model Trail {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    name                String
    description         String
    pictures            String[]
    latitude            Float               @db.DoublePrecision
    longitude           Float               @db.DoublePrecision
    difficulty          Int
    duration            Int
    distance            Int
    uphill              Int
    downhill            Int
    labels              String[]
    geoJSON             String              @unique
    comments            Comment[]
    hikes               Hike[]
    pointOfInterests    PointOfInterest[]
}

model Comment {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    authorId            String              @db.VarChar(36)
    author              User                @relation(fields: [authorId], references: [id])
    trailId             String              @db.VarChar(36)
    trail               Trail               @relation(fields: [trailId], references: [id])
    body                String
    pictures            String[]
    date                DateTime            @default(now())
}

model Hike {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    creatorId           String              @db.VarChar(36)
    trailId             String              @db.VarChar(36)
    trail               Trail               @relation(fields: [trailId], references: [id])
    attendees           User[]              @relation("Attendee")
    guests              User[]              @relation("Guest")
    stats               Stats[]
    schedule            DateTime            @default(now())
}

model Stats {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    userId              String              @db.VarChar(36)
    user                User                @relation(fields: [userId], references: [id])
    hikeId              String              @db.VarChar(36)
    hike                Hike                @relation(fields: [hikeId], references: [id])
    steps               Int                 @default(0)
    distanceTravelled   Int                 @default(0)
    completed           Boolean             @default(false)
}

model PointOfInterest {
    id                  String              @unique @id @default(uuid()) @db.VarChar(36)
    creatorId           String              @db.VarChar(36)
    creator             User                @relation(fields: [creatorId], references: [id])
    trailId             String              @db.VarChar(36)
    trail               Trail               @relation(fields: [trailId], references: [id])
    latitude            Float               @db.DoublePrecision
    longitude           Float               @db.DoublePrecision
}

enum Role {
    ADMIN
    USER
}
